import { Component } from '@angular/core';
import { MessageService } from 'primeng/api';
import { Clients } from 'src/app/components/models/clients';
import { Expert } from 'src/app/components/models/expert';
import { AuthService } from 'src/app/components/services/auth/auth.service';
import { ExpertService } from 'src/app/components/services/expert.service';
import { DocumentService } from 'src/app/components/services/document.service'; // Service pour r√©cup√©rer les documents

@Component({
  selector: 'app-affect-expert-to-client',
  templateUrl: './affect-expert-to-client.component.html',
  styleUrls: ['./affect-expert-to-client.component.scss']
})
export class AffectExpertToClientComponent {
  expertId: string = ''; // ID de l'expert
  clientId: string = ''; // ID du client
  documentId: string = ''; // ID du document s√©lectionn√©
  documents: any[] = []; // Tableau pour stocker les documents du client
  Users: Clients[] = [];  // Liste des clients
  experts: Expert[] = []; // Liste des experts

  constructor(
    private expertService: ExpertService,    
    private userService: AuthService, 
    private messageService: MessageService,
    private documentService: DocumentService // Injecter le service pour r√©cup√©rer les documents
  ) {}

  ngOnInit() {
    const clientId = this.getUserId();
    console.log("Client ID r√©cup√©r√©:", clientId); // üîç V√©rifier la valeur

    this.getAllClients();
    this.getAllExperts();
  }

  affecterExpert() {
    // this.documentId est d√©j√† l'ID puisqu'on utilise optionValue dans le template
    this.expertService.affecterExpert(this.expertId, this.clientId, this.documentId)
      .subscribe(
        response => {
          console.log('Affectation r√©ussie :', response);
          this.messageService.add({severity: 'success', summary: 'Succ√®s', detail: 'Expert affect√© avec succ√®s'});
        },
        error => {
          console.error('Erreur lors de l\'affectation :', error);
          this.messageService.add({severity: 'error', summary: 'Erreur', detail: 'Erreur lors de l\'affectation'});
        }
      );
}

  // M√©thode pour r√©cup√©rer tous les clients
  getAllClients(): void {
    this.userService.getUser().subscribe(ss => {
      // Filtrer les utilisateurs pour ne garder que ceux avec userType = 'client'
      this.Users = ss;
      console.log("clients: ", ss);
    }, error => {
      console.error("Erreur lors de la r√©cup√©ration des utilisateurs:", error);
    });
  }

  // M√©thode pour r√©cup√©rer tous les experts
  getAllExperts(): void {
    this.expertService.getExpert().subscribe(
      experts => {
        this.experts = experts;
      },
      error => {
        console.error('Erreur lors de la r√©cup√©ration des experts:', error);
      }
    );
  }

  // M√©thode pour r√©cup√©rer les documents du client s√©lectionn√©
  onClientChange(event: any): void {
    this.clientId = event.value; // R√©cup√®re l'ID du client s√©lectionn√©
    this.getDocumentsByClient(this.clientId); // R√©cup√®re les documents associ√©s √† ce client
  }

  // M√©thode pour r√©cup√©rer les documents associ√©s √† un client
  getDocumentsByClient(client: any): void {
    const clientId = client._id || client.id; // üîπ R√©cup√®re l'ID depuis l'objet
  
    console.log("üîç Client ID extrait:", clientId);
    console.log("üîç URL API:", `http://localhost:9090/documents/client/${clientId}`);
  
    this.documentService.getDocumentsByClient(clientId).subscribe(
      documents => {
        // Filtrer les documents pour ne garder que ceux ayant le statut "Valid√©"
        const validatedDocuments = documents.filter(doc => doc.status === 'Valid√©');
  
        // Transformation des documents filtr√©s pour extraire le nom du fichier
        this.documents = validatedDocuments.map(doc => ({
          label: doc.doc,  // Utilisation du champ `doc` comme label pour le dropdown
          value: doc._id   // L'ID du document comme valeur associ√©e
        }));
      },
      error => {
        console.error("‚ùå Erreur API:", error);
      }
    );
  }
  
  
  
  
  
  getUserId(): string | null {
    return localStorage.getItem('user_id'); // Assurez-vous que 'user_id' est bien stock√© sous forme de cha√Æne
  }
}
